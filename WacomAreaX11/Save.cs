using System;
using System.Diagnostics;
using System.IO;
using WacomAreaX11.Input;
using XSetWacom;

namespace WacomAreaX11
{
	internal static partial class Program
	{
		private static readonly string ConfigSavePath
			= Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), "tabletconfigs");
		
		private static void Save(Tablet tablet)
		{
			var saveFileName = Tools.Prompt("What should the save be called?", true);

			var area      = tablet.Area.Unscaled;
			var rotation  = tablet.BoundArea.Rotation;
			var smoothing = tablet.BoundArea.Smoothing;

			var tabletName = tablet.Name;
			
			var configFileText = $@"#!/bin/sh
xsetwacom set ""{tabletName}"" Area {area.left} {area.top} {area.right} {area.bottom}
xsetwacom set ""{tabletName}"" Rotate {rotation}
xsetwacom set ""{tabletName}"" RawSample {smoothing}
# This file was generated by WacomAreaX11
# https://github.com/yellowsink/WacomAreaX11";
			
			var filePath = Path.Combine(ConfigSavePath, saveFileName + ".sh");

			Directory.CreateDirectory(ConfigSavePath);
			File.WriteAllText(filePath, configFileText);
			Process.Start("chmod", new[] { "+x", filePath }).WaitForExit();
			
			var con = CountingConsole.WriteLineNew($@"Saved to ~/tabletconfigs/{saveFileName}.sh
To apply the config either use this tool or run the file directly from a terminal.
Press a key to go back to the main menu.");
			con.ReadKey();
			con.ClearAllLinesWritten();
		}
	}
}